version: 1.0
groups:
  clean:
    targets:
      all:
        help: Clean unnecessary temporary files
        run: |
          rm -fr build/
          rm -fr dist/
          rm -fr .eggs/
          find . -name '*.egg-info' -exec rm -fr {} +
          find . -name '*.egg' -exec rm -f {} +
          find . -name '*.pyc' -exec rm -f {} +
          find . -name
          find . -name '__pycache__' -exec rm -fr '*.pyo' -exec rm -f {} +
          find . -name '*~' -exec rm -f {} +{} +
          rm -f .coverage
          rm -fr htmlcov/
          rm -fr .pytest_cache
          rm -fr .mypy_cache
          rm -fr .ruff_cache

  docs:
    targets:
      build:
        help: Build documentation
        run: |
          mkdocs build --config-file docs/mkdocs.yaml

      preview:
        help: Preview documentation page locally
        dependencies:
          - target: docs.build
        run: |
          mkdocs build --config-file docs/mkdocs.yaml

  tests:
    env:
      TEST_TMP: /tmp/envers
      ENVERS_PASS: ASDF1234

    targets:
      linter:
        help: Run linter tools
        run: |
          pre-commit install
          pre-commit run --all-files --verbose

      unit:
        help: run tests
        args:
          path:
            help: Specify the location of the tests
            type: string
            default: ""
          params:
            help: Specify parameters to be used for tests
            type: string
            default: "-vv"
        run: |
          pytest {{ args.path }} {{ args.params }}

      smoke-setup:
        help: "Smoke test for envers init"
        shell: bash
        run: |
          export TEST_TMP="{{ env.TEST_TMP }}"
          rm -rf "${TEST_TMP}"
          mkdir -p "${TEST_TMP}"
          cd "${TEST_TMP}"

      smoke-init:
        help: "Smoke test for envers init"
        dependencies:
          - target: tests.smoke-setup
        shell: bash
        run: |
          export TEST_TMP="{{ env.TEST_TMP }}"
          cd "${TEST_TMP}"
          envers init
          test -f "${TEST_TMP}/.envers/specs.yaml"

      smoke-draft:
        help: "Smoke test for envers draft"
        shell: bash
        dependencies:
          - target: tests.smoke-init
        run: |
          export CURRENT_PATH="$(pwd)"
          export TEST_DATA="${CURRENT_PATH}/tests/data"
          export TEST_TMP="{{ env.TEST_TMP }}"
          cd "${TEST_TMP}"
          envers init
          echo "ENV=dev" > .env
          envers draft 1.0 --from-env .env
          envers draft 2.0 --from-spec 1.0

      smoke-deploy:
        help: "Smoke test for envers draft"
        shell: bash
        dependencies:
          - target: tests.smoke-draft
        run: |
          export CURRENT_PATH="$(pwd)"
          export TEST_DATA="${CURRENT_PATH}/tests/data"
          export TEST_TMP="{{ env.TEST_TMP }}"
          cd "${TEST_TMP}"
          envers deploy --profile base --spec 1.0 << EOF
          $(echo "{{ env.ENVERS_PASS }}")
          $(echo "{{ env.ENVERS_PASS }}")
          EOF
          envers deploy --profile base --spec 2.0 << EOF
          $(echo "{{ env.ENVERS_PASS }}")
          $(echo "{{ env.ENVERS_PASS }}")
          EOF

      smoke:
        help: "Smoke tests"
        dependencies:
          - target: tests.smoke-init
          - target: tests.smoke-draft
          - target: tests.smoke-deploy

      ci:
        help: run the sames tests executed on CI
        dependencies:
          - target: tests.unit
          - target: tests.smoke
          - target: tests.linter

  package:
    targets:
      build:
        help: "Build the package"
        run: |
          poetry build

  release:
    vars:
      app: |
        npx --yes \
        -p semantic-release \
        -p conventional-changelog-conventionalcommits \
        -p "@semantic-release/commit-analyzer" \
        -p "@semantic-release/release-notes-generator" \
        -p "@semantic-release/changelog" \
        -p "@semantic-release/exec" \
        -p "@semantic-release/github" \
        -p "@semantic-release/git" \
        -p "semantic-release-replace-plugin" \
        semantic-release

    targets:
      ci:
        help: run semantic release on CI
        run: {{ vars.app }} --ci

      dry:
        help: run semantic release in dry-run mode
        run: {{ vars.app }} --dry-run
