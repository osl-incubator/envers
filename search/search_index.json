{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Envers","text":"<p><code>Envers</code> is a command-line tool (CLI) designed to manage and version environment variables for different deployment stages such as staging, development, and production. It provides a secure and organized way to handle environment-specific configurations.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Encrypt environment variables: Creates encrypted files that store environment   variables that can be safely stored in a git repository</li> <li>Group-Based Configurations: Allows defining variables for different   groups/profiles like prod, dev, etc.</li> <li>File-Based Variable Definitions: Supports multiple environment files (.env)   with specific variables for each file.</li> <li>CLI-Driven: Provide CLI commands that helps to create drafts for environment   variables and deploy it to encrypted files</li> <li>Spec Management: Each release has a defined spec that applies to all   groups/profiles within that release.</li> <li>Environment File Generation: Enables generating .env files for specific   versions and groups/profiles using commands.</li> </ul>"},{"location":"#installation","title":"Installation","text":"<p>TBD</p>"},{"location":"#usage","title":"Usage","text":"<p>Below are the initial subcommands for <code>envers</code>:</p> <ul> <li><code>envers init</code>: Initialize the <code>envers</code> environment.</li> <li><code>envers deploy &lt;spec version number&gt;</code>: Deploy a specific version from the spec   file.</li> <li><code>envers draft &lt;spec version number&gt;</code>: Create a new version draft in the spec   file. Some variants of this command:</li> <li><code>envers draft &lt;spec version number&gt; --from &lt;previous spec version number&gt;</code></li> <li><code>envers draft &lt;spec version number&gt; --from-env .env</code></li> <li><code>envers profile-set --profile &lt;profile_name&gt; --spec &lt;version_number&gt;</code>: Add new   content.</li> <li><code>envers profile load --profile prod --spec &lt;spec version&gt;</code>: Load a specific   environment profile to files</li> </ul> <p><code>envers init</code> creates the spec file at <code>.envers/.specs.yaml</code>.</p> <p><code>envers deploy</code> creates the file <code>.envers/.data.lock</code>. This file is auto-generated by <code>envers</code> command, and it is encrypted.</p> <p>The initial version of <code>./.envers/.specs.yaml</code> would look like this:</p> <pre><code>version: 0.1 # the envers spec version\nreleases:\n</code></pre> <p>As you can see, it doesn't have too much information. If you want to draft a new version, you can run the following command:</p> <pre><code>$ envers draft 1.0\n</code></pre> <p>After this command, the <code>.envers/specs.yaml</code> file should look like this:</p> <pre><code>version: 0.1 # the spec version\nreleases:\n  # placeholder: the version for the environment variables.\n  #   if the status is draft, feel free to change the version number\n  1.0:\n    # status attribute is handled by command line, don't change it manually\n    status: draft # options are: draft, cancelled, deployed\n    # placeholder: update help with the real help text\n    help:\n    # placeholder: a list of available profiles (groups) for this version.\n    #   at least one profile is required for the deploying\n    profiles:\n      - base\n    # define the spec for that version, this spec should be used for all\n    # profiles (groups) inside this version\n    spec:\n      # define the env file or any other kind of environment file to be used,\n      # for now it just has support for .env files\n      files:\n        # placeholder: change `.env` to the correct dotenv file relative path\n        .env:\n          type: dotenv # default\n          # `vars` is a dictionary for the environment variables\n          # this defines the variables and some metadata, but not the real\n          # value, because it is just the definition of the spec.\n          vars:\n            # placeholder: ENV is just a variable name, replace it by your real\n            # environment variable\n            ENV:\n              type: string # options are: string, int, bool, path\n              default: dev # in the case that the variable is not defined\n</code></pre> <p>Now, you can deploy your first version of environment variables:</p> <pre><code>$ envers deploy 1.0\n</code></pre> <p>When a version is deployed, it creates automatically all the new spec into the <code>.envers/data.lock</code>.</p> <p>All the variables for the each profile and spec version is stored into <code>.envers/data.lock</code>, and this file shouldn't be changed for any reason.</p> <p>Finally, we can create the environment variables for the <code>base</code> profile:</p> <pre><code>$ envers profile set --profile base --spec 1.0\n</code></pre> <p><code>envers</code> will ask you via prompt the value for each variable defined in the spec for version <code>1.0</code>.</p>"},{"location":"#roadmap","title":"Roadmap","text":"<ul> <li>Detailed spec and content management functionalities.</li> <li>Enhancements in versioning and group management.</li> <li>Integration with makim and sugar.</li> </ul>"},{"location":"#contributing","title":"Contributing","text":"<p>https://osl-incubator.github.io/envers</p>"},{"location":"#license","title":"License","text":"<p>BSD-Clause 3</p>"},{"location":"changelog/","title":"Release Notes","text":""},{"location":"changelog/#041-2024-09-28","title":"0.4.1 (2024-09-28)","text":""},{"location":"changelog/#bug-fixes","title":"Bug Fixes","text":"<ul> <li>Update project structure and configuration (#20) (2a85543)</li> </ul>"},{"location":"changelog/#040-2023-12-23","title":"0.4.0 (2023-12-23)","text":""},{"location":"changelog/#features","title":"Features","text":"<ul> <li>Add step for password confirmation for the deploy command (#15) (72c270e)</li> <li>cli: Implement --version flag to CLI (#11) (5fd7a68)</li> </ul>"},{"location":"changelog/#030-2023-12-22","title":"0.3.0 (2023-12-22)","text":""},{"location":"changelog/#features_1","title":"Features","text":"<ul> <li>Separate data.lock per profile and fix small issues (#8) (91a8b3d)</li> </ul>"},{"location":"changelog/#020-2023-12-15","title":"0.2.0 (2023-12-15)","text":""},{"location":"changelog/#bug-fixes_1","title":"Bug Fixes","text":"<ul> <li>Fix release workflow (#5) (8ba1407)</li> <li>Fix release workflow (#6) (38e9d7c)</li> </ul>"},{"location":"changelog/#features_2","title":"Features","text":"<ul> <li>Implement option for passing password as a stdin (#4) (4ab5ba8)</li> </ul>"},{"location":"contributing/","title":"Contributing","text":"<p>In order to be able to contribute, it is important that you understand the project layout. This project uses the src layout, which means that the package code is located at <code>./src/envers</code>.</p> <p>For my information, check the official documentation: https://packaging.python.org/en/latest/discussions/src-layout-vs-flat-layout/</p> <p>In addition, you should know that to build our package we use Poetry, it's a Python package management tool that simplifies the process of building and publishing Python packages. It allows us to easily manage dependencies, virtual environments and package versions. Poetry also includes features such as dependency resolution, lock files and publishing to PyPI. Overall, Poetry streamlines the process of managing Python packages, making it easier for us to create and share our code with others.</p> <p>Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given.</p> <p>You can contribute in many ways:</p>"},{"location":"contributing/#types-of-contributions","title":"Types of Contributions","text":""},{"location":"contributing/#report-bugs","title":"Report Bugs","text":"<p>Report bugs at https://github.com/osl-incubator/envers/issues.</p> <p>If you are reporting a bug, please include:</p> <ul> <li>Your operating system name and version.</li> <li>Any details about your local setup that might be helpful in troubleshooting.</li> <li>Detailed steps to reproduce the bug.</li> </ul>"},{"location":"contributing/#fix-bugs","title":"Fix Bugs","text":"<p>Look through the GitHub issues for bugs. Anything tagged with \u201cbug\u201d and \u201chelp wanted\u201d is open to whoever wants to implement it.</p>"},{"location":"contributing/#implement-features","title":"Implement Features","text":"<p>Look through the GitHub issues for features. Anything tagged with \u201cenhancement\u201d and \u201chelp wanted\u201d is open to whoever wants to implement it.</p>"},{"location":"contributing/#write-documentation","title":"Write Documentation","text":"<p>Envers could always use more documentation, whether as part of the official Envers docs, in docstrings, or even on the web in blog posts, articles, and such.</p>"},{"location":"contributing/#submit-feedback","title":"Submit Feedback","text":"<p>The best way to send feedback is to file an issue at https://github.com/osl-incubator/envers/issues.</p> <p>If you are proposing a feature:</p> <ul> <li>Explain in detail how it would work.</li> <li>Keep the scope as narrow as possible, to make it easier to implement.</li> <li>Remember that this is a volunteer-driven project, and that contributions are   welcome :)</li> </ul>"},{"location":"contributing/#get-started","title":"Get Started!","text":"<p>Ready to contribute? Here\u2019s how to set up <code>envers</code> for local development.</p> <ol> <li> <p>Fork the <code>envers</code> repo on GitHub.</p> </li> <li> <p>Clone your fork locally::</p> <p>$ git clone git@github.com:your_name_here/envers.git</p> </li> <li> <p>Install your local copy into a virtualenv. Assuming you have     virtualenvwrapper installed, this is how you set up your fork for local     development::</p> <p>$ mkvirtualenv envers $ cd envers/ $ python setup.py develop</p> </li> <li> <p>Create a branch for local development::</p> <p>$ git checkout -b name-of-your-bugfix-or-feature</p> <p>Now you can make your changes locally.</p> </li> <li> <p>When you\u2019re done making changes, check that your changes pass flake8 and the     tests, including testing other Python versions with tox::</p> <p>$ make lint $ make test</p> <p>To get flake8 and tox, just pip install them into your virtualenv.</p> </li> <li> <p>Commit your changes and push your branch to GitHub::</p> <p>$ git add . $ git commit -m \u201cYour detailed description of your changes.\u201d $ git push origin name-of-your-bugfix-or-feature</p> </li> <li> <p>Submit a pull request through the GitHub website.</p> </li> </ol>"},{"location":"contributing/#pull-request-guidelines","title":"Pull Request Guidelines","text":"<p>Before you submit a pull request, check that it meets these guidelines:</p> <ol> <li>The pull request should include tests.</li> <li>If the pull request adds functionality, the docs should be updated. Put your     new functionality into a function with a docstring, and add the feature to     the list in README.rst.</li> <li>The pull request should work for Python &gt;= 3.8.</li> </ol>"},{"location":"contributing/#tips","title":"Tips","text":"<p>To run a subset of tests::</p> <pre><code>$ pytest tests.test_envers\n</code></pre>"},{"location":"contributing/#release","title":"Release","text":"<p>This project uses semantic-release in order to cut a new release based on the commit-message.</p>"},{"location":"contributing/#commit-message-format","title":"Commit message format","text":"<p>semantic-release uses the commit messages to determine the consumer impact of changes in the codebase. Following formalized conventions for commit messages, semantic-release automatically determines the next semantic version number, generates a changelog and publishes the release.</p> <p>By default, semantic-release uses Angular Commit Message Conventions. The commit message format can be changed with the <code>preset</code> or <code>config</code> options_ of the @semantic-release/commit-analyzer and @semantic-release/release-notes-generator plugins.</p> <p>Tools such as commitizen or commitlint can be used to help contributors and enforce valid commit messages.</p> <p>The table below shows which commit message gets you which release type when <code>semantic-release</code> runs (using the default configuration):</p> Commit message Release type <code>fix(pencil): stop graphite breaking when pressure is applied</code> Fix Release <code>feat(pencil): add 'graphiteWidth' option</code> Feature Release <code>perf(pencil): remove graphiteWidth option</code> Chore <code>BREAKING CHANGE: The graphiteWidth option has been removed</code> Breaking Release <p>source: https://github.com/semantic-release/semantic-release/blob/master/README.md#commit-message-format</p> <p>As this project uses the <code>squash and merge</code> strategy, ensure to apply the commit message format to the PR's title.</p>"},{"location":"example/","title":"Envers","text":"In\u00a0[\u00a0]: Copied! <pre>import envers\n</pre> import envers In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"example/#envers","title":"Envers\u00b6","text":"<p>Envers is Python library that aims to do ...</p>"},{"location":"example/#getting-started","title":"Getting Started\u00b6","text":"<p>First, check our documentation about the installation.</p> <p>Now, let's import our library:</p>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#stable-release","title":"Stable release","text":"<p>To install Envers, run this command in your terminal:</p> <pre><code>$ pip install envers\n</code></pre> <p>This is the preferred method to install Envers, as it will always install the most recent stable release.</p> <p>If you don't have pip installed, this Python installation guide can guide you through the process.</p>"},{"location":"installation/#from-sources","title":"From sources","text":"<p>The sources for Envers can be downloaded from the Github repo.</p> <p>You can either clone the public repository:</p> <pre><code>$ git clone https://github.com/osl-incubator/envers\n</code></pre> <p>Or download the tarball:</p> <pre><code>$ curl -OJL https://github.com/osl-incubator/envers/tarball/main\n</code></pre> <p>Once you have a copy of the source, you can install it with:</p> <pre><code>$ poetry install\n</code></pre>"},{"location":"api/SUMMARY/","title":"SUMMARY","text":"<ul> <li> envers<ul> <li> cli</li> <li> core</li> <li> crypt</li> </ul> </li> </ul>"},{"location":"api/envers/","title":"Index","text":""},{"location":"api/envers/#envers","title":"envers","text":"<p>Envers.</p>"},{"location":"api/envers/#envers.get_version","title":"get_version","text":"<pre><code>get_version() -&gt; str\n</code></pre> <p>Return the program version.</p> Source code in <code>src/envers/__init__.py</code> <pre><code>def get_version() -&gt; str:\n    \"\"\"Return the program version.\"\"\"\n    try:\n        return importlib_metadata.version(__name__)\n    except importlib_metadata.PackageNotFoundError:  # pragma: no cover\n        return \"0.4.1\"  # semantic-release\n</code></pre>"},{"location":"api/envers/cli/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> cli","text":""},{"location":"api/envers/cli/#envers.cli","title":"cli","text":"<p>Definition of the CLI structure.</p>"},{"location":"api/envers/cli/#envers.cli.deploy","title":"deploy","text":"<pre><code>deploy(profile: Annotated[str, Option(help='The name of the profile to set values for.')] = '', spec: Annotated[str, Option(help='The version of the spec to use.')] = '') -&gt; None\n</code></pre> <p>Deploy a specific version from the spec file.</p> Source code in <code>src/envers/cli.py</code> <pre><code>@app.command()\ndef deploy(\n    profile: Annotated[\n        str, typer.Option(help=\"The name of the profile to set values for.\")\n    ] = \"\",\n    spec: Annotated[\n        str, typer.Option(help=\"The version of the spec to use.\")\n    ] = \"\",\n) -&gt; None:\n    \"\"\"Deploy a specific version from the spec file.\"\"\"\n    envers = Envers()\n    envers.deploy(profile, spec)\n</code></pre>"},{"location":"api/envers/cli/#envers.cli.draft","title":"draft","text":"<pre><code>draft(version: str, from_spec: str = '', from_env: str = '') -&gt; None\n</code></pre> <p>Create a new version draft in the spec file.</p> Source code in <code>src/envers/cli.py</code> <pre><code>@app.command()\ndef draft(version: str, from_spec: str = \"\", from_env: str = \"\") -&gt; None:\n    \"\"\"Create a new version draft in the spec file.\"\"\"\n    envers = Envers()\n    envers.draft(version, from_spec, from_env)\n</code></pre>"},{"location":"api/envers/cli/#envers.cli.init","title":"init","text":"<pre><code>init(path: str = '.') -&gt; None\n</code></pre> <p>Initialize the .envers directory and specs file.</p> <p>Initialize the envers environment at the given path. This includes creating a .envers folder and a spec.yaml file within it with default content.</p> <p>Parameters:</p> <ul> <li> <code>path</code>               (<code>str</code>, default:                   <code>'.'</code> )           \u2013            <p>The directory path where the envers environment will be initialized. Defaults to the current directory (\".\").</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>None</code>           \u2013            </li> </ul> Source code in <code>src/envers/cli.py</code> <pre><code>@app.command()\ndef init(path: str = \".\") -&gt; None:\n    \"\"\"\n    Initialize the .envers directory and specs file.\n\n    Initialize the envers environment at the given path. This includes creating\n    a .envers folder and a spec.yaml file within it with default content.\n\n    Parameters\n    ----------\n    path : str, optional\n        The directory path where the envers environment will be initialized.\n        Defaults to the current directory (\".\").\n\n    Returns\n    -------\n    None\n\n    \"\"\"\n    envers = Envers()\n    envers.init(Path(path))\n</code></pre>"},{"location":"api/envers/cli/#envers.cli.main","title":"main","text":"<pre><code>main(ctx: Context, version: bool = Option(None, '--version', '-v', is_flag=True, help='Show the version and exit.')) -&gt; None\n</code></pre> <p>Process envers for specific flags, otherwise show the help menu.</p> Source code in <code>src/envers/cli.py</code> <pre><code>@app.callback(invoke_without_command=True)\ndef main(\n    ctx: Context,\n    version: bool = Option(\n        None,\n        \"--version\",\n        \"-v\",\n        is_flag=True,\n        help=\"Show the version and exit.\",\n    ),\n) -&gt; None:\n    \"\"\"Process envers for specific flags, otherwise show the help menu.\"\"\"\n    if version:\n        typer.echo(f\"Version: {__version__}\")\n        raise typer.Exit()\n\n    if ctx.invoked_subcommand is None:\n        typer.echo(ctx.get_help())\n        raise typer.Exit(0)\n</code></pre>"},{"location":"api/envers/cli/#envers.cli.profile_load","title":"profile_load","text":"<pre><code>profile_load(profile: Annotated[str, Option(help='The name of the profile to set values for.')] = '', spec: Annotated[str, Option(help='The version of the spec to use.')] = '') -&gt; None\n</code></pre> <p>Load a specific environment profile to files.</p> Source code in <code>src/envers/cli.py</code> <pre><code>@app.command()\ndef profile_load(\n    profile: Annotated[\n        str, typer.Option(help=\"The name of the profile to set values for.\")\n    ] = \"\",\n    spec: Annotated[\n        str, typer.Option(help=\"The version of the spec to use.\")\n    ] = \"\",\n) -&gt; None:\n    \"\"\"Load a specific environment profile to files.\"\"\"\n    envers = Envers()\n    envers.profile_load(profile, spec)\n</code></pre>"},{"location":"api/envers/cli/#envers.cli.profile_set","title":"profile_set","text":"<pre><code>profile_set(profile: Annotated[str, Option(help='The name of the profile to set values for.')] = '', spec: Annotated[str, Option(help='The version of the spec to use.')] = '') -&gt; None\n</code></pre> <p>Set the profile values for a given spec version.</p> <p>Parameters:</p> <ul> <li> <code>profile</code>               (<code>str</code>, default:                   <code>''</code> )           \u2013            <p>The name of the profile to set values for.</p> </li> <li> <code>spec</code>               (<code>str</code>, default:                   <code>''</code> )           \u2013            <p>The version of the spec to use.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>None</code>           \u2013            </li> </ul> Source code in <code>src/envers/cli.py</code> <pre><code>@app.command()\ndef profile_set(\n    profile: Annotated[\n        str, typer.Option(help=\"The name of the profile to set values for.\")\n    ] = \"\",\n    spec: Annotated[\n        str, typer.Option(help=\"The version of the spec to use.\")\n    ] = \"\",\n) -&gt; None:\n    \"\"\"\n    Set the profile values for a given spec version.\n\n    Parameters\n    ----------\n    profile : str\n        The name of the profile to set values for.\n    spec : str\n        The version of the spec to use.\n\n    Returns\n    -------\n    None\n    \"\"\"\n    envers = Envers()\n    envers.profile_set(profile, spec)\n</code></pre>"},{"location":"api/envers/cli/#envers.cli.profile_versions","title":"profile_versions","text":"<pre><code>profile_versions(profile_name: str, spec_version: str) -&gt; None\n</code></pre> <p>Return the profile's version.</p> <p>Return all the versions for the contents for a specific profile and spec version.</p> Source code in <code>src/envers/cli.py</code> <pre><code>@app.command()\ndef profile_versions(profile_name: str, spec_version: str) -&gt; None:\n    \"\"\"\n    Return the profile's version.\n\n    Return all the versions for the contents for a specific profile and spec\n    version.\n    \"\"\"\n    print(profile_name, spec_version)\n</code></pre>"},{"location":"api/envers/core/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> core","text":""},{"location":"api/envers/core/#envers.core","title":"core","text":"<p>Envers class for containers.</p>"},{"location":"api/envers/core/#envers.core.Envers","title":"Envers","text":"<p>EnversBase defined the base structure for the Envers classes.</p>"},{"location":"api/envers/core/#envers.core.Envers.deploy","title":"deploy","text":"<pre><code>deploy(profile: str, spec: str, password: Optional[str] = None) -&gt; None\n</code></pre> <p>Deploy a specific version, updating the .envers/data.lock file.</p> <p>Parameters:</p> <ul> <li> <code>profile</code>               (<code>str</code>)           \u2013            <p>The profile to be deployed.</p> </li> <li> <code>spec</code>               (<code>str</code>)           \u2013            <p>The version number to be deployed.</p> </li> <li> <code>password</code>               (<code>Optional[str]</code>, default:                   <code>None</code> )           \u2013            <p>The password to be used for that profile.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>None</code>           \u2013            </li> </ul> Source code in <code>src/envers/core.py</code> <pre><code>def deploy(\n    self, profile: str, spec: str, password: Optional[str] = None\n) -&gt; None:\n    \"\"\"\n    Deploy a specific version, updating the .envers/data.lock file.\n\n    Parameters\n    ----------\n    profile : str\n        The profile to be deployed.\n    spec : str\n        The version number to be deployed.\n    password : Optional[str]\n        The password to be used for that profile.\n\n    Returns\n    -------\n    None\n    \"\"\"\n    specs_file = Path(\".envers\") / ENVERS_SPEC_FILENAME\n    data_file = Path(\".envers\") / \"data\" / f\"{profile}.lock\"\n\n    if not specs_file.exists():\n        raise_error(\"Spec file not found. Please initialize envers first.\")\n\n    with open(specs_file, \"r\") as file:\n        specs = yaml.safe_load(file) or {}\n\n    if not specs.get(\"releases\", {}).get(spec, \"\"):\n        raise_error(f\"Version {spec} not found in specs.yaml.\")\n\n    spec_data = copy.deepcopy(specs[\"releases\"][spec])\n\n    # all data in the data.lock file are deployed\n    del spec_data[\"status\"]\n\n    if data_file.exists():\n        if password is None:\n            password = crypt.get_password()\n\n        data_lock = self._read_data_file(profile, password)\n\n        if not data_lock:\n            typer.echo(\"data.lock is not valid. Creating a new file.\")\n            data_lock = {\n                \"version\": spec_data[\"version\"],\n                \"releases\": {},\n            }\n        data_lock[\"releases\"][spec] = {\"spec\": spec_data, \"data\": {}}\n    else:\n        data_lock = {\n            \"version\": specs[\"version\"],\n            \"releases\": {spec: {\"spec\": spec_data, \"data\": {}}},\n        }\n\n        if password is None:\n            new_password = crypt.get_password()\n            new_password_confirmation = crypt.get_password(\n                \"Confirm your password\"\n            )\n\n            if new_password != new_password_confirmation:\n                raise_error(\n                    \"The password and confirmation do not match. \"\n                    \"Please try again.\"\n                )\n\n            password = new_password\n\n    # Populate data with default values\n    for profile_name in spec_data.get(\"profiles\", []):\n        profile_data: dict[\"str\", dict[str, Any]] = {\"files\": {}}\n        for file_path, file_info in (\n            spec_data.get(\"spec\", {}).get(\"files\", {}).items()\n        ):\n            file_data = {\n                \"type\": file_info.get(\"type\", \"dotenv\"),\n                \"vars\": {},\n            }\n            for var_name, var_info in file_info.get(\"vars\", {}).items():\n                default_value = var_info.get(\"default\", \"\")\n                file_data[\"vars\"][var_name] = default_value\n            profile_data[\"files\"][file_path] = file_data\n        data_lock[\"releases\"][spec][\"data\"][profile_name] = profile_data\n\n    self._write_data_file(profile, data_lock, password)\n\n    with open(specs_file, \"w\") as file:\n        specs[\"releases\"][spec][\"status\"] = \"deployed\"\n        yaml.dump(specs, file, sort_keys=False)\n</code></pre>"},{"location":"api/envers/core/#envers.core.Envers.draft","title":"draft","text":"<pre><code>draft(version: str, from_spec: str = '', from_env: str = '') -&gt; None\n</code></pre> <p>Create a new draft version in the spec file.</p> <p>Parameters:</p> <ul> <li> <code>version</code>               (<code>str</code>)           \u2013            <p>The version number for the new draft.</p> </li> <li> <code>from_spec</code>               (<code>str</code>, default:                   <code>''</code> )           \u2013            <p>The version number from which to copy the spec.</p> </li> <li> <code>from_env</code>               (<code>str</code>, default:                   <code>''</code> )           \u2013            <p>The .env file from which to load environment variables.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>None</code>           \u2013            </li> </ul> Source code in <code>src/envers/core.py</code> <pre><code>def draft(\n    self, version: str, from_spec: str = \"\", from_env: str = \"\"\n) -&gt; None:\n    \"\"\"\n    Create a new draft version in the spec file.\n\n    Parameters\n    ----------\n    version : str\n        The version number for the new draft.\n    from_spec : str, optional\n        The version number from which to copy the spec.\n    from_env : str, optional\n        The .env file from which to load environment variables.\n\n    Returns\n    -------\n    None\n    \"\"\"\n    spec_file = Path(\".envers\") / ENVERS_SPEC_FILENAME\n\n    if not spec_file.exists():\n        raise_error(\"Spec file not found. Please initialize envers first.\")\n\n    with open(spec_file, \"r\") as file:\n        specs = yaml.safe_load(file) or {}\n\n    if not specs.get(\"releases\", {}):\n        specs[\"releases\"] = {}\n\n    if specs.get(\"releases\", {}).get(\"version\", \"\"):\n        # warning\n        typer.echo(\n            f\"The given version {version} is already defined in the \"\n            \"specs.yaml file.\"\n        )\n\n    if not specs[\"releases\"].get(version, {}):\n        specs[\"releases\"][version] = {\n            \"docs\": \"\",\n            \"status\": \"draft\",\n            \"profiles\": [\"base\"],\n            \"spec\": {\"files\": {}},\n        }\n\n    if from_spec:\n        if not specs.get(\"releases\", {}).get(from_spec, \"\"):\n            raise_error(\n                f\"Source version {from_spec} not found in specs.yaml.\"\n            )\n\n        specs[\"releases\"][version] = merge_dicts(\n            specs[\"releases\"][from_spec],\n            specs[\"releases\"][version],\n        )\n\n    elif from_env:\n        env_path = Path(from_env)\n        if not env_path.exists():\n            raise_error(f\".env file {from_env} not found.\")\n\n        # Read .env file and populate variables\n        env_vars = dotenv_values(env_path)\n        file_spec = {\n            \"docs\": \"\",\n            \"type\": \"dotenv\",\n            \"vars\": {\n                var: {\n                    \"docs\": \"\",\n                    \"type\": \"string\",\n                    \"default\": value,\n                }\n                for var, value in env_vars.items()\n            },\n        }\n        spec_files = specs[\"releases\"][version][\"spec\"][\"files\"]\n        spec_files[from_env] = file_spec\n\n    with open(spec_file, \"w\") as file:\n        yaml.dump(specs, file, sort_keys=False)\n</code></pre>"},{"location":"api/envers/core/#envers.core.Envers.init","title":"init","text":"<pre><code>init(path: Path) -&gt; None\n</code></pre> <p>Initialize Envers instance.</p> <p>Initialize the envers environment at the given path. This includes creating a .envers folder and a spec.yaml file within it with default content.</p> <p>Parameters:</p> <ul> <li> <code>path</code>               (<code>str</code>)           \u2013            <p>The directory path where the envers environment will be initialized. Defaults to the current directory (\".\").</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>None</code>           \u2013            </li> </ul> Source code in <code>src/envers/core.py</code> <pre><code>def init(self, path: Path) -&gt; None:\n    \"\"\"\n    Initialize Envers instance.\n\n    Initialize the envers environment at the given path. This includes\n    creating a .envers folder and a spec.yaml file within it with default\n    content.\n\n    Parameters\n    ----------\n    path : str, optional\n        The directory path where the envers environment will be\n        initialized. Defaults to the current directory (\".\").\n\n    Returns\n    -------\n    None\n    \"\"\"\n    envers_path = path / \".envers\"\n    spec_file = envers_path / ENVERS_SPEC_FILENAME\n\n    # Create .envers directory if it doesn't exist\n    os.makedirs(envers_path, exist_ok=True)\n\n    if spec_file.exists():\n        return\n\n    # Create and write the default content to spec.yaml\n    with open(spec_file, \"w\") as file:\n        file.write(\"version: '0.1'\\nreleases:\\n\")\n</code></pre>"},{"location":"api/envers/core/#envers.core.Envers.profile_load","title":"profile_load","text":"<pre><code>profile_load(profile: str, spec: str, password: Optional[str] = None) -&gt; None\n</code></pre> <p>Load a specific environment profile to files.</p> <p>Load a specific environment profile to files based on the given spec version.</p> <p>Parameters:</p> <ul> <li> <code>profile</code>               (<code>str</code>)           \u2013            <p>The name of the profile to load.</p> </li> <li> <code>spec</code>               (<code>str</code>)           \u2013            <p>The version of the spec to use.</p> </li> <li> <code>password</code>               (<code>Optional[str]</code>, default:                   <code>None</code> )           \u2013            <p>The password to be used for that profile.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>None</code>           \u2013            </li> </ul> Source code in <code>src/envers/core.py</code> <pre><code>def profile_load(\n    self, profile: str, spec: str, password: Optional[str] = None\n) -&gt; None:\n    \"\"\"\n    Load a specific environment profile to files.\n\n    Load a specific environment profile to files based on the given\n    spec version.\n\n    Parameters\n    ----------\n    profile : str\n        The name of the profile to load.\n    spec : str\n        The version of the spec to use.\n    password : Optional[str]\n        The password to be used for that profile.\n\n    Returns\n    -------\n    None\n    \"\"\"\n    data_file = Path(\".envers\") / \"data\" / f\"{profile}.lock\"\n\n    if not data_file.exists():\n        raise_error(\n            \"Data lock file not found. Please deploy a version first.\"\n        )\n\n    if password is None:\n        password = crypt.get_password()\n\n    data_lock = self._read_data_file(profile, password)\n\n    if not data_lock.get(\"releases\", {}).get(spec, \"\"):\n        raise_error(f\"Version {spec} not found in data.lock.\")\n\n    release_data = data_lock[\"releases\"][spec]\n    profile_data = release_data.get(\"data\", {}).get(profile, {\"files\": {}})\n\n    # Iterate over files and variables\n    for file_path, file_info in profile_data.get(\"files\", {}).items():\n        file_content = \"\"\n        for var_name, var_value in file_info.get(\"vars\", {}).items():\n            file_content += f\"{var_name}={var_value}\\n\"\n\n        # Create or update the file\n        with open(file_path, \"w\") as file:\n            file.write(file_content)\n\n    typer.echo(\n        f\"Environment files for profile '{profile}' and spec version \"\n        f\"'{spec}' have been created/updated.\"\n    )\n</code></pre>"},{"location":"api/envers/core/#envers.core.Envers.profile_set","title":"profile_set","text":"<pre><code>profile_set(profile: str, spec: str, password: Optional[str] = None) -&gt; None\n</code></pre> <p>Set the profile values for a given spec version.</p> <p>Parameters:</p> <ul> <li> <code>profile</code>               (<code>str</code>)           \u2013            <p>The name of the profile to set values for.</p> </li> <li> <code>spec</code>               (<code>str</code>)           \u2013            <p>The version of the spec to use.</p> </li> <li> <code>password</code>               (<code>Optional[str]</code>, default:                   <code>None</code> )           \u2013            <p>The password to be used for that profile.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>None</code>           \u2013            </li> </ul> Source code in <code>src/envers/core.py</code> <pre><code>def profile_set(\n    self, profile: str, spec: str, password: Optional[str] = None\n) -&gt; None:\n    \"\"\"\n    Set the profile values for a given spec version.\n\n    Parameters\n    ----------\n    profile : str\n        The name of the profile to set values for.\n    spec : str\n        The version of the spec to use.\n    password : Optional[str]\n        The password to be used for that profile.\n\n    Returns\n    -------\n    None\n    \"\"\"\n    data_file = Path(\".envers\") / \"data\" / f\"{profile}.lock\"\n\n    if not data_file.exists():\n        raise_error(\n            \"Data lock file not found. Please deploy a version first.\"\n        )\n\n    if password is None:\n        password = crypt.get_password()\n\n    data_lock = self._read_data_file(profile, password)\n\n    if not data_lock.get(\"releases\", {}).get(spec, \"\"):\n        raise_error(f\"Version {spec} not found in data.lock.\")\n\n    release_data = data_lock[\"releases\"][spec]\n    profile_data = release_data.get(\"data\", {}).get(profile, {})\n\n    if not (profile_data and profile_data.get(\"files\", {})):\n        raise_error(\n            f\"There is no data spec for version '{spec}' \"\n            f\"and profile '{profile}'\"\n        )\n\n    # Iterate over files and variables\n    size = os.get_terminal_size()\n\n    profile_title = f\" Profile: {profile} \".center(size.columns, \"=\")\n    typer.echo(f\"\\n{profile_title}\\n\")\n\n    for file_path, file_info in profile_data.get(\"files\", {}).items():\n        file_title = f\"&gt;&gt;&gt; File: {file_path} \"\n        typer.echo(f\"{file_title}\\n\")\n        for var_name, var_info in file_info.get(\"vars\", {}).items():\n            current_value = var_info\n            new_value = typer.prompt(\n                f\"Enter value for `{var_name}`\",\n                default=current_value,\n            )\n            profile_data[\"files\"][file_path][\"vars\"][var_name] = new_value\n\n        # update the size for each iteration\n        size = os.get_terminal_size()\n        typer.echo(f\"\\n{size.columns * '-'}\\n\")\n\n    # Update data.lock file\n    data_lock[\"releases\"][spec][\"data\"][profile] = profile_data\n    self._write_data_file(profile, data_lock, password)\n</code></pre>"},{"location":"api/envers/core/#envers.core.escape_template_tag","title":"escape_template_tag","text":"<pre><code>escape_template_tag(v: str) -&gt; str\n</code></pre> <p>Escape template tags for template rendering.</p> Source code in <code>src/envers/core.py</code> <pre><code>def escape_template_tag(v: str) -&gt; str:\n    \"\"\"Escape template tags for template rendering.\"\"\"\n    return v.replace(\"{{\", r\"\\{\\{\").replace(\"}}\", r\"\\}\\}\")\n</code></pre>"},{"location":"api/envers/core/#envers.core.merge_dicts","title":"merge_dicts","text":"<pre><code>merge_dicts(dict_lhs: dict[str, Any], dict_rhs: dict[str, Any]) -&gt; dict[str, Any]\n</code></pre> <p>Merge two dictionaries recursively.</p> <p>Parameters:</p> <ul> <li> <code>dict_lhs</code>               (<code>dict</code>)           \u2013            <p>The primary dictionary to retain values from.</p> </li> <li> <code>dict_rhs</code>               (<code>dict</code>)           \u2013            <p>The secondary dictionary to merge values from.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>dict</code>           \u2013            <p>The merged dictionary.</p> </li> </ul> Source code in <code>src/envers/core.py</code> <pre><code>def merge_dicts(\n    dict_lhs: dict[str, Any], dict_rhs: dict[str, Any]\n) -&gt; dict[str, Any]:\n    \"\"\"\n    Merge two dictionaries recursively.\n\n    Parameters\n    ----------\n    dict_lhs : dict\n        The primary dictionary to retain values from.\n    dict_rhs : dict\n        The secondary dictionary to merge values from.\n\n    Returns\n    -------\n    dict\n        The merged dictionary.\n    \"\"\"\n    dict_lhs = copy.deepcopy(dict_lhs)\n\n    for key in dict_rhs:\n        if key in dict_lhs:\n            if isinstance(dict_lhs[key], dict) and isinstance(\n                dict_rhs[key], dict\n            ):\n                merge_dicts(dict_lhs[key], dict_rhs[key])\n            else:\n                dict_lhs[key] = dict_rhs[key]\n        else:\n            dict_lhs[key] = dict_rhs[key]\n    return dict_lhs\n</code></pre>"},{"location":"api/envers/core/#envers.core.raise_error","title":"raise_error","text":"<pre><code>raise_error(message: str, exit_code: int = 1) -&gt; None\n</code></pre> <p>Raise an error using typer.</p> Source code in <code>src/envers/core.py</code> <pre><code>def raise_error(message: str, exit_code: int = 1) -&gt; None:\n    \"\"\"Raise an error using typer.\"\"\"\n    red_text = typer.style(message, fg=typer.colors.RED, bold=True)\n    typer.echo(red_text, err=True, color=True)\n    raise typer.Exit(exit_code)\n</code></pre>"},{"location":"api/envers/core/#envers.core.unescape_template_tag","title":"unescape_template_tag","text":"<pre><code>unescape_template_tag(v: str) -&gt; str\n</code></pre> <p>Unescape template tags for template rendering.</p> Source code in <code>src/envers/core.py</code> <pre><code>def unescape_template_tag(v: str) -&gt; str:\n    \"\"\"Unescape template tags for template rendering.\"\"\"\n    return v.replace(r\"\\{\\{\", \"{{\").replace(r\"\\}\\}\", \"}}\")\n</code></pre>"},{"location":"api/envers/crypt/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> crypt","text":""},{"location":"api/envers/crypt/#envers.crypt","title":"crypt","text":"<p>Functions for cryptography.</p>"},{"location":"api/envers/crypt/#envers.crypt.create_fernet_key","title":"create_fernet_key","text":"<pre><code>create_fernet_key(password: str, salt: bytes) -&gt; bytes\n</code></pre> <p>Create a Fernet key.</p> Source code in <code>src/envers/crypt.py</code> <pre><code>def create_fernet_key(password: str, salt: bytes) -&gt; bytes:\n    \"\"\"Create a Fernet key.\"\"\"\n    # Use PBKDF2HMAC to derive a Fernet-compatible key from the user password\n    kdf = PBKDF2HMAC(\n        algorithm=hashes.SHA256(),\n        length=32,\n        salt=salt,\n        iterations=100000,\n        backend=default_backend(),\n    )\n    return base64.urlsafe_b64encode(kdf.derive(password.encode(\"utf-8\")))\n</code></pre>"},{"location":"api/envers/crypt/#envers.crypt.decrypt_data","title":"decrypt_data","text":"<pre><code>decrypt_data(data: str, password: Optional[str] = None) -&gt; str\n</code></pre> <p>Decrypt the given data.</p> Source code in <code>src/envers/crypt.py</code> <pre><code>def decrypt_data(data: str, password: Optional[str] = None) -&gt; str:\n    \"\"\"Decrypt the given data.\"\"\"\n    if password is None:\n        password = get_password()\n\n    HEX_SALT_LENGTH = SALT_LENGTH * 2\n\n    salt_hex, data_clean = data[:HEX_SALT_LENGTH], data[HEX_SALT_LENGTH:]\n    salt = bytes.fromhex(salt_hex)\n\n    key = create_fernet_key(password, salt)\n    cipher_suite = Fernet(key)\n\n    return cipher_suite.decrypt(data_clean.encode(\"utf-8\")).decode(\"utf-8\")\n</code></pre>"},{"location":"api/envers/crypt/#envers.crypt.encrypt_data","title":"encrypt_data","text":"<pre><code>encrypt_data(data: str, password: Optional[str] = None) -&gt; str\n</code></pre> <p>Encrypt the given data.</p> Source code in <code>src/envers/crypt.py</code> <pre><code>def encrypt_data(data: str, password: Optional[str] = None) -&gt; str:\n    \"\"\"Encrypt the given data.\"\"\"\n    if password is None:\n        password = get_password()\n\n    salt = generate_salt()\n    salt_hex = salt.hex()\n    key = create_fernet_key(password, salt)\n    cipher_suite = Fernet(key)\n\n    encrypted = cipher_suite.encrypt(data.encode(\"utf-8\")).decode(\"utf-8\")\n    return salt_hex + encrypted\n</code></pre>"},{"location":"api/envers/crypt/#envers.crypt.generate_salt","title":"generate_salt","text":"<pre><code>generate_salt() -&gt; bytes\n</code></pre> <p>Generate a salt in byte format.</p> Source code in <code>src/envers/crypt.py</code> <pre><code>def generate_salt() -&gt; bytes:\n    \"\"\"Generate a salt in byte format.\"\"\"\n    return os.urandom(SALT_LENGTH)\n</code></pre>"},{"location":"api/envers/crypt/#envers.crypt.get_password","title":"get_password","text":"<pre><code>get_password(message: str = '') -&gt; str\n</code></pre> <p>Prompt a password.</p> Source code in <code>src/envers/crypt.py</code> <pre><code>def get_password(message: str = \"\") -&gt; str:\n    \"\"\"Prompt a password.\"\"\"\n    if sys.stdin.isatty():\n        # Interactive mode: Use Typer's prompt\n        message = \"Enter your password\" if not message else message\n        password = cast(str, typer.prompt(message, hide_input=True))\n    else:\n        # Non-interactive mode: Read from stdin\n        password = sys.stdin.readline().rstrip()\n    return password\n</code></pre>"}]}